You need a file called a makefile to tell make what to do. Most often, the makefile tells make how to compile and link a program

A simple makefile consists of "rules" with the following shape:

target ... : dependencies ...
        command
        ...
        ...
A target is usually the name of a file that is generated by a program; examples of targets are executable or object files. 
A target can also be the name of an action to carry out, such as `clean'

A dependency is a file that is used as input to create the target. A target often depends on several files.

A command is an action that make carries out. A rule may have more than one command, each on its own line.

Usually a command is in a rule with dependencies and serves to create a target file if any of the dependencies change.

A rule, then, explains how and when to remake certain files which are the targets of the particular rule.
make carries out the commands on the dependencies to create or update the target. A rule can also explain how and when to carryout an action.

When a target is a file, it needs to be recompiled or relinked if any of its dependencies change.

How make Processes a Makefile:

By default, make starts with the first rule

Thus, when you give the command:

make

make reads the makefile in the current directory and begins by processing the first rule. In the example, this rule 
is for relinking `edit'; but before make can fully process this rule, it must process the rules for the 
files that `edit' depends on, which in this case are the object files. 
Each of these files is processed according to its own rule. These rules say to update each `.o' 
file by compiling its source file. The recompilation must be done if the source file, or 
any of the header files named as dependencies, is more recent than the object file, or if the object file does not exist.


